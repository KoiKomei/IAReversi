%STRATEGIA ANGOLI E PEDINE STABILI

%pedine negli angoli
pedinaAngolo(0,0).
pedinaAngolo(0,7).
pedinaAngolo(7,0).
pedinaAngolo(7,7).

%le pedinaStabile rappresentano la posizione di una pedina stabile e il peso annesso alla sua tipologia = tipo : peso    A : 2 , B : 4 , C : 8 , X : 16

%tipo A
pedinaStabile(2,0,2).
pedinaStabile(5,0,2).
pedinaStabile(0,2,2).
pedinaStabile(0,5,2).
pedinaStabile(2,7,2).
pedinaStabile(5,7,2).
pedinaStabile(7,2,2).
pedinaStabile(7,5,2).

%tipo B
pedinaStabile(3,0,4).
pedinaStabile(4,0,4).
pedinaStabile(0,3,4).
pedinaStabile(0,4,4).
pedinaStabile(3,7,4).
pedinaStabile(4,7,4).
pedinaStabile(7,3,4).
pedinaStabile(7,4,4).

%tipo C
pedinaStabile(1,0,8).
pedinaStabile(6,0,8).
pedinaStabile(0,1,8).
pedinaStabile(0,6,8).
pedinaStabile(1,7,8).
pedinaStabile(6,7,8).
pedinaStabile(7,1,8).
pedinaStabile(7,6,8).

%tipo X
pedinaStabile(1,1,16).
pedinaStabile(1,6,16).
pedinaStabile(6,1,16).
pedinaStabile(6,6,16).

% Optimize se c'e' un angolo da poter scegliere e lui non lo sceglie
:~ posizioneNonScelta(Riga, Colonna), pedinaAngolo(Riga, Colonna). [1:15]

% Optimize se lui sceglie una posizione "pessima"
:~ posizioneScelta(Riga, Colonna), pedinaStabile(Riga, Colonna, Peso). [Peso : 4]


%GUESS AND CHECK

% il numero di righe e di colonne della matrice
rigaOcolonna(0..7).

% posizioni gia' presenti delle pedine nella matrice
pedinaPresente(Riga, Colonna, Valore) :- cell(Riga, Colonna, Valore), Valore != 0, Valore != 3.

% posizioni occupate
posizioneOccupata(Riga, Colonna) :- pedinaPresente(Riga, Colonna, _).

% posizioni non occupate
posizioneNonOccupata(Riga, Colonna) :- not posizioneOccupata(Riga,Colonna), rigaOcolonna(Riga), rigaOcolonna(Colonna).

% colore pedina del computer
coloreComputer(1).

% colore pedina del'avversario
coloreAvversario(2).

% mosse valide
mossaValida(X,Y) :- cell(X,Y,3).

% Guess posizioneScelta indica la posizione scelta dal computer, posizione non scelta tutte le altre possibili
posizioneScelta(X,Y) | posizioneNonScelta(X,Y) :- mossaValida(X,Y).

% Check ci deve essere un solo atomo ground di posizioneScelta
:- not #count{X,Y: posizioneScelta(X,Y)}=1.

% Output
answer(X,Y) :- posizioneScelta(X,Y).



% BUCO

%controlla se c'è un buco tra le pedine la prima e' sempre quella dove dovra' essere inserita la pedina e la seconda e' sempre una gia' del computer

bucoPerRigaP(Riga, Colonna1, Colonna2) :- pedinaPresente(Riga, Colonna2, C), coloreComputer(C), posizioneNonOccupata(Riga,Colonna3), Colonna3 > Colonna1, Colonna3 < Colonna2, rigaOcolonna(Colonna1).
bucoPerRigaD(Riga, Colonna1, Colonna2) :- pedinaPresente(Riga, Colonna2, C), coloreComputer(C), posizioneNonOccupata(Riga,Colonna3), Colonna3 < Colonna1, Colonna3 > Colonna2, rigaOcolonna(Colonna1).

bucoPerColonnaP(Colonna, Riga1, Riga2) :- pedinaPresente(Riga2, Colonna, C), coloreComputer(C), posizioneNonOccupata(Riga3,Colonna), Riga3 > Riga1, Riga3 < Riga2, rigaOcolonna(Riga1).
bucoPerColonnaD(Colonna, Riga1, Riga2) :- pedinaPresente(Riga2, Colonna, C), coloreComputer(C), posizioneNonOccupata(Riga3,Colonna), Riga3 < Riga1, Riga3 > Riga2, rigaOcolonna(Riga1).

% secondo punto in alto a sinistra del primo punto
bucoPerDiagonaleAS(Riga1, Colonna1, Riga2, Colonna2) :- pedinaPresente(Riga2, Colonna2, C), coloreComputer(C), posizioneNonOccupata(Riga3,Colonna3), Riga1 = Riga3 + K1, Colonna1 = Colonna3 + K1, Riga2 = Riga3 - K2, Colonna2 = Colonna3 - K2, rigaOcolonna(K1), rigaOcolonna(K2), rigaOcolonna(Riga1), rigaOcolonna(Colonna1).
% secondo punto in alto a destra del primo punto
bucoPerDiagonaleAD(Riga1, Colonna1, Riga2, Colonna2) :- pedinaPresente(Riga2, Colonna2, C), coloreComputer(C), posizioneNonOccupata(Riga3,Colonna3), Riga1 = Riga3 + K1, Colonna1 = Colonna3 - K1, Riga2 = Riga3 - K2, Colonna2 = Colonna3 + K2, rigaOcolonna(K1), rigaOcolonna(K2), rigaOcolonna(Riga1), rigaOcolonna(Colonna1).
% secondo punto in basso a sinistra del primo punto
bucoPerDiagonaleBS(Riga1, Colonna1, Riga2, Colonna2) :- pedinaPresente(Riga2, Colonna2, C), coloreComputer(C), posizioneNonOccupata(Riga3,Colonna3), Riga1 = Riga3 - K1, Colonna1 = Colonna3 + K1, Riga2 = Riga3 + K2, Colonna2 = Colonna3 - K2, rigaOcolonna(K1), rigaOcolonna(K2), rigaOcolonna(Riga1), rigaOcolonna(Colonna1).
% secondo punto in basso a destra del primo punto
bucoPerDiagonaleBD(Riga1, Colonna1, Riga2, Colonna2) :- pedinaPresente(Riga2, Colonna2, C), coloreComputer(C), posizioneNonOccupata(Riga3,Colonna3), Riga1 = Riga3 - K1, Colonna1 = Colonna3 - K1, Riga2 = Riga3 + K2, Colonna2 = Colonna3 + K2, rigaOcolonna(K1), rigaOcolonna(K2), rigaOcolonna(Riga1), rigaOcolonna(Colonna1).



% PEDINA NON MANGIABILE

% se c'e' tra due pedine una pedina non "mangiabile" (una del computer o una cella vuota)

pedinaNonMangiabilePerRigaP(Riga, Colonna1, Colonna2) :- bucoPerRigaP(Riga, Colonna1, Colonna2).
pedinaNonMangiabilePerRigaP(Riga, Colonna1, Colonna2) :- pedinaPresente(Riga, Colonna2, C), coloreComputer(C), pedinaPresente(Riga, Colonna3, C), Colonna3 > Colonna1, Colonna3 < Colonna2, rigaOcolonna(Colonna1).

pedinaNonMangiabilePerRigaD(Riga, Colonna1, Colonna2) :- bucoPerRigaD(Riga, Colonna1, Colonna2).
pedinaNonMangiabilePerRigaD(Riga, Colonna1, Colonna2) :- pedinaPresente(Riga, Colonna2, C), coloreComputer(C), pedinaPresente(Riga, Colonna3, C), Colonna3 < Colonna1, Colonna3 > Colonna2, rigaOcolonna(Colonna1).


pedinaNonMangiabilePerColonnaP(Colonna, Riga1, Riga2) :- bucoPerColonnaP(Colonna, Riga1, Riga2).
pedinaNonMangiabilePerColonnaP(Colonna, Riga1, Riga2) :- pedinaPresente(Riga2, Colonna, C), coloreComputer(C), pedinaPresente(Riga3, Colonna, C), Riga3 > Riga1, Riga3 < Riga2, rigaOcolonna(Riga1).

pedinaNonMangiabilePerColonnaD(Colonna, Riga1, Riga2) :- bucoPerColonnaD(Colonna, Riga1, Riga2).
pedinaNonMangiabilePerColonnaD(Colonna, Riga1, Riga2) :- pedinaPresente(Riga2, Colonna, C), coloreComputer(C), pedinaPresente(Riga3, Colonna, C), Riga3 < Riga1, Riga3 > Riga2, rigaOcolonna(Riga1).


% secondo punto in alto a sinistra del primo punto
pedinaNonMangiabilePerDiagonaleAS(Riga1, Colonna1, Riga2, Colonna2) :- bucoPerDiagonaleAS(Riga1, Colonna1, Riga2, Colonna2).
pedinaNonMangiabilePerDiagonaleAS(Riga1, Colonna1, Riga2, Colonna2) :- pedinaPresente(Riga2, Colonna2, C), coloreComputer(C), pedinaPresente(Riga3, Colonna3, C), Riga1 = Riga3 + K1, Colonna1 = Colonna3 + K1, Riga2 = Riga3 - K2, Colonna2 = Colonna3 - K2, rigaOcolonna(K1), rigaOcolonna(K2), rigaOcolonna(Riga1), rigaOcolonna(Colonna1).
% secondo punto in alto a destra del primo punto
pedinaNonMangiabilePerDiagonaleAD(Riga1, Colonna1, Riga2, Colonna2) :- bucoPerDiagonaleAD(Riga1, Colonna1, Riga2, Colonna2).
pedinaNonMangiabilePerDiagonaleAD(Riga1, Colonna1, Riga2, Colonna2) :- pedinaPresente(Riga2, Colonna2, C), coloreComputer(C), pedinaPresente(Riga3, Colonna3, C), Riga1 = Riga3 + K1, Colonna1 = Colonna3 - K1, Riga2 = Riga3 - K2, Colonna2 = Colonna3 + K2, rigaOcolonna(K1), rigaOcolonna(K2), rigaOcolonna(Riga1), rigaOcolonna(Colonna1).
% secondo punto in basso a sinistra del primo punto
pedinaNonMangiabilePerDiagonaleBS(Riga1, Colonna1, Riga2, Colonna2) :- bucoPerDiagonaleBS(Riga1, Colonna1, Riga2, Colonna2).
pedinaNonMangiabilePerDiagonaleBS(Riga1, Colonna1, Riga2, Colonna2) :- pedinaPresente(Riga2, Colonna2, C), coloreComputer(C), pedinaPresente(Riga3, Colonna3, C), Riga1 = Riga3 - K1, Colonna1 = Colonna3 + K1, Riga2 = Riga3 + K2, Colonna2 = Colonna3 - K2, rigaOcolonna(K1), rigaOcolonna(K2), rigaOcolonna(Riga1), rigaOcolonna(Colonna1).
% secondo punto in basso a destra del primo punto
pedinaNonMangiabilePerDiagonaleBD(Riga1, Colonna1, Riga2, Colonna2) :- bucoPerDiagonaleBD(Riga1, Colonna1, Riga2, Colonna2).
pedinaNonMangiabilePerDiagonaleBD(Riga1, Colonna1, Riga2, Colonna2) :- pedinaPresente(Riga2, Colonna2, C), coloreComputer(C), pedinaPresente(Riga3, Colonna3, C), Riga1 = Riga3 - K1, Colonna1 = Colonna3 - K1, Riga2 = Riga3 + K2, Colonna2 = Colonna3 + K2, rigaOcolonna(K1), rigaOcolonna(K2), rigaOcolonna(Riga1), rigaOcolonna(Colonna1).



%TRA SULLA STESSA

% in 1 c'e' la posizione scelta in 2 c'è una pedina del computer in Colonna c'e' la colonna di una pedina della stessa Riga, compresa tra 1 e 2
traSullaStessaRiga(Riga, Colonna1, Colonna2, Colonna) :- pedinaPresente(Riga, Colonna, Ca), coloreAvversario(Ca), posizioneScelta(Riga, Colonna1), pedinaPresente(Riga, Colonna2, C), coloreComputer(C), Colonna > Colonna1, Colonna < Colonna2, not pedinaNonMangiabilePerRigaP(Riga, Colonna1, Colonna2).
traSullaStessaRiga(Riga, Colonna1, Colonna2, Colonna) :- pedinaPresente(Riga, Colonna, Ca), coloreAvversario(Ca), posizioneScelta(Riga, Colonna1), pedinaPresente(Riga, Colonna2, C), coloreComputer(C), Colonna < Colonna1, Colonna > Colonna2, not pedinaNonMangiabilePerRigaD(Riga, Colonna1, Colonna2).

% in 1 c'e' la posizione scelta in 2 c'è una pedina del computer in Riga c'e' la colonna di una pedina della stessa Colonna, compresa tra 1 e 2
traSullaStessaColonna(Riga1, Riga2, Colonna, Riga) :- pedinaPresente(Riga, Colonna, Ca), coloreAvversario(Ca), posizioneScelta(Riga1, Colonna), pedinaPresente(Riga2, Colonna, C), coloreComputer(C), Riga > Riga1, Riga < Riga2, not pedinaNonMangiabilePerColonnaP(Colonna, Riga1, Riga2).
traSullaStessaColonna(Riga1, Riga2, Colonna, Riga) :- pedinaPresente(Riga, Colonna, Ca), coloreAvversario(Ca), posizioneScelta(Riga1, Colonna), pedinaPresente(Riga2, Colonna, C), coloreComputer(C), Riga < Riga1, Riga > Riga2, not pedinaNonMangiabilePerColonnaD(Colonna, Riga1, Riga2).

% secondo punto in alto a sinistra del primo punto
traSullaStessaDiagonale(Riga1, Colonna1, Riga2, Colonna2, Riga, Colonna) :- pedinaPresente(Riga, Colonna, Ca), coloreAvversario(Ca), posizioneScelta(Riga1, Colonna1), pedinaPresente(Riga2, Colonna2, C), coloreComputer(C), Riga1 = Riga + K1, Colonna1 = Colonna + K1, Riga2 = Riga - K2, Colonna2 = Colonna - K2, rigaOcolonna(K1), rigaOcolonna(K2), rigaOcolonna(Riga1), rigaOcolonna(Colonna1), not pedinaNonMangiabilePerDiagonaleAS(Riga1, Colonna1, Riga2, Colonna2).
% secondo punto in alto a destra del primo punto
traSullaStessaDiagonale(Riga1, Colonna1, Riga2, Colonna2, Riga, Colonna) :- pedinaPresente(Riga, Colonna, Ca), coloreAvversario(Ca), posizioneScelta(Riga1, Colonna1), pedinaPresente(Riga2, Colonna2, C), coloreComputer(C), Riga1 = Riga + K1, Colonna1 = Colonna - K1, Riga2 = Riga - K2, Colonna2 = Colonna + K2, rigaOcolonna(K1), rigaOcolonna(K2), rigaOcolonna(Riga1), rigaOcolonna(Colonna1), not pedinaNonMangiabilePerDiagonaleAD(Riga1, Colonna1, Riga2, Colonna2).
% secondo punto in basso a sinistra del primo punto
traSullaStessaDiagonale(Riga1, Colonna1, Riga2, Colonna2, Riga, Colonna) :- pedinaPresente(Riga, Colonna, Ca), coloreAvversario(Ca), posizioneScelta(Riga1, Colonna1), pedinaPresente(Riga2, Colonna2, C), coloreComputer(C), Riga1 = Riga - K1, Colonna1 = Colonna + K1, Riga2 = Riga + K2, Colonna2 = Colonna - K2, rigaOcolonna(K1), rigaOcolonna(K2), rigaOcolonna(Riga1), rigaOcolonna(Colonna1), not pedinaNonMangiabilePerDiagonaleBS(Riga1, Colonna1, Riga2, Colonna2).
% secondo punto in basso a destra del primo punto
traSullaStessaDiagonale(Riga1, Colonna1, Riga2, Colonna2, Riga, Colonna) :- pedinaPresente(Riga, Colonna, Ca), coloreAvversario(Ca), posizioneScelta(Riga1, Colonna1), pedinaPresente(Riga2, Colonna2, C), coloreComputer(C), Riga1 = Riga - K1, Colonna1 = Colonna - K1, Riga2 = Riga + K2, Colonna2 = Colonna + K2, rigaOcolonna(K1), rigaOcolonna(K2), rigaOcolonna(Riga1), rigaOcolonna(Colonna1), not pedinaNonMangiabilePerDiagonaleBD(Riga1, Colonna1, Riga2, Colonna2).


