%Guess and check, default per ogni modalità

% il numero di righe e di colonne della matrice
% ironicamente, alcune volte è più veloce di usare cell(_, _, _)
rigacolonna(0..7).

% piccolo reminder: CPU=1, Umano=2, casella non occupata=0, casella dove si può mettere una pedina=3

% tutte le caselle occupate 
casellaOccupata(X, Y, Valore) :- cell(X, Y, Valore), Valore != 0, Valore != 3.

% mosse valide
mossaValida(X,Y) :- cell(X,Y,3).

% posizionescelta e non, si spiega da solo
posizioneScelta(X,Y) | posizioneNonScelta(X,Y) :- mossaValida(X,Y).

% Ovviamente si può scegliere solo una soluzione
:- not #count{X,Y: posizioneScelta(X,Y)}=1.

% Output
answer(X,Y) :- posizioneScelta(X,Y).

%fine roba di default

%pedine stabile ed angoli

%pedine negli angoli
pedinaAngolo(0,0).
pedinaAngolo(0,7).
pedinaAngolo(7,0).
pedinaAngolo(7,7).

%tipo A
pedinaStabile(2,0,2).
pedinaStabile(5,0,2).
pedinaStabile(0,2,2).
pedinaStabile(0,5,2).
pedinaStabile(2,7,2).
pedinaStabile(5,7,2).
pedinaStabile(7,2,2).
pedinaStabile(7,5,2).

%tipo B
pedinaStabile(3,0,4).
pedinaStabile(4,0,4).
pedinaStabile(0,3,4).
pedinaStabile(0,4,4).
pedinaStabile(3,7,4).
pedinaStabile(4,7,4).
pedinaStabile(7,3,4).
pedinaStabile(7,4,4).

%tipo C
pedinaStabile(1,0,8).
pedinaStabile(6,0,8).
pedinaStabile(0,1,8).
pedinaStabile(0,6,8).
pedinaStabile(1,7,8).
pedinaStabile(6,7,8).
pedinaStabile(7,1,8).
pedinaStabile(7,6,8).

%tipo X
pedinaStabile(1,1,16).
pedinaStabile(1,6,16).
pedinaStabile(6,1,16).
pedinaStabile(6,6,16).

% Se c'è un angolo e non lo vuole prendere
:~ posizioneNonScelta(X, Y), pedinaAngolo(X, Y). [1:7]

% In caso cerca di prendere una pedina di un certo tipo ed è una pedina stabile
:~ posizioneScelta(X, Y), pedinaStabile(X, Y, Peso). [Peso : 3]

%fine pedine stabili ed angoli


%inizio pedine di frontiera

%data la struttura del nostro reversi, ci siamo dovuti ricalcolare tutta la matrice
%ci salviamo le caselle occupate dalla cpu e quelle vuote

casellaNonOccupabileSinistra(X, Y1, Y2) :- casellaOccupata(X, Y2, 1), mossaValida(X, Y3), cell(X, Y1, V), V!=2, Y3 > Y1, Y3 < Y2.
casellaNonOccupabileSinistra(X, Y1, Y2) :- casellaOccupata(X, Y2, 1), casellaOccupata(X, Y3, 1), cell(X, Y1, _), Y3 > Y1, Y3 < Y2.

casellaNonOccupabileDestra(X, Y1, Y2) :- casellaOccupata(X, Y2, 1), mossaValida(X, Y3), cell(X, Y1, V), V!=2, Y3 < Y1, Y3 > Y2.
casellaNonOccupabileDestra(X, Y1, Y2) :- casellaOccupata(X, Y2, 1), casellaOccupata(X, Y3, 1), cell(X, Y1, _), Y3 < Y1, Y3 > Y2.

casellaNonOccupabileSopra(Y, X1, X2) :- casellaOccupata(X2, Y, 1), mossaValida(X3, Y), cell(X1, Y, V), V!=2, X3 > X1, X3 < X2.
casellaNonOccupabileSopra(Y, X1, X2) :- casellaOccupata(X2, Y, 1), casellaOccupata(X3, Y, 1), cell(X1, Y, _), X3 > X1, X3 < X2.

casellaNonOccupabileSotto(Y, X1, X2) :- casellaOccupata(X2, Y, 1), mossaValida(X3, Y), cell(X1, Y, V), V!=2, X3 < X1, X3 > X2.
casellaNonOccupabileSotto(Y, X1, X2) :- casellaOccupata(X2, Y, 1), casellaOccupata(X3, Y, 1), cell(X1, Y, _), X3 < X1, X3 > X2.

casellaNonOccupabileSinistraSopra(X1, Y1, X2, Y2) :- casellaOccupata(X2, Y2, 1), mossaValida(X3, Y3), cell(X1, Y1, V), V!=2, X1 = X3 + K, Y1 = Y3 + K, X2 = X3 - J, Y2 = Y3 - J, rigacolonna(K), rigacolonna(J).
casellaNonOccupabileSinistraSopra(X1, Y1, X2, Y2) :- casellaOccupata(X2, Y2, 1), casellaOccupata(X3, Y3, 1), cell(X1, Y, _), X1 = X3 + K, Y1 = Y3 + K, X2 = X3 - J, Y2 = Y3 - J, rigacolonna(K), rigacolonna(J).

casellaNonOccupabileDestraSopra(X1, Y1, X2, Y2) :- casellaOccupata(X2, Y2, 1), mossaValida(X3, Y3), cell(X1, Y1, V), V!=2, X1 = X3 + K, Y1 = Y3 - K, X2 = X3 - J, Y2 = Y3 + J, rigacolonna(K), rigacolonna(J).
casellaNonOccupabileDestraSopra(X1, Y1, X2, Y2) :- casellaOccupata(X2, Y2, 1), casellaOccupata(X3, Y3, 1), cell(X1, Y1, _), X1 = X3 + K, Y1 = Y3 - K, X2 = X3 - J, Y2 = Y3 + J, rigacolonna(K), rigacolonna(J).

casellaNonOccupabileSinistraSotto(X1, Y1, X2, Y2) :- casellaOccupata(X2, Y2, 1), mossaValida(X3, Y3), cell(X1, Y1, V), V!=2, X1 = X3 - K, Y1 = Y3 + K, X2 = X3 + J, Y2 = Y3 - J, rigacolonna(K), rigacolonna(J).
casellaNonOccupabileSinistraSotto(X1, Y1, X2, Y2) :- casellaOccupata(X2, Y2, 1), casellaOccupata(X3, Y3, 1), cell(X1, Y1, _), X1 = X3 - K, Y1 = Y3 + K, X2 = X3 + J, Y2 = Y3 - J, rigacolonna(K), rigacolonna(J).

casellaNonOccupabileDestraSotto(X1, Y1, X2, Y2) :- casellaOccupata(X2, Y2, 1), mossaValida(X3, Y3), cell(X1, Y1, V), V!=2, X1 = X3 - K, Y1 = Y3 - K, X2 = X3 + J, Y2 = Y3 + J, rigacolonna(K), rigacolonna(J).
casellaNonOccupabileDestraSotto(X1, Y1, X2, Y2) :- casellaOccupata(X2, Y2, 1), casellaOccupata(X3, Y3, 1), cell(X1, Y1, _), X1 = X3 - K, Y1 = Y3 - K, X2 = X3 + J, Y2 = Y3 + J, rigacolonna(K), rigacolonna(J).


%ora ci salviamo tutte le pedine che si potrebbero girare con una scelta che facciamo

pedineGirabiliRiga(X, Y, Y1, Y2) :- casellaOccupata(X, Y, 2), casellaOccupata(X, Y2, 1), not casellaNonOccupabileSinistra(X, Y1, Y2), posizioneScelta(X, Y1), Y > Y1, Y < Y2.
pedineGirabiliRiga(X, Y, Y1, Y2) :- casellaOccupata(X, Y, 2), casellaOccupata(X, Y2, 1), not casellaNonOccupabileDestra(X, Y1, Y2), posizioneScelta(X, Y1), Y < Y1, Y > Y2.

pedineGirabiliColonna(X, Y, X1, X2) :- casellaOccupata(X, Y, 2), casellaOccupata(X2, Y, 1), not casellaNonOccupabileSopra(Y, X1, X2), posizioneScelta(X1, Y), X > X1, X < X2.
pedineGirabiliColonna(X, Y, X1, X2) :- casellaOccupata(X, Y, 2), casellaOccupata(X2, Y, 1), not casellaNonOccupabileSotto(Y, X1, X2), posizioneScelta(X1, Y), X < X1, X > X2.

pedineGirabiliDiagonale(X, Y, X1, X2, Y1, Y2) :- casellaOccupata(X, Y, 2), casellaOccupata(X2, Y2, 1), posizioneScelta(X1, Y1), cell(X1, Y1, 2), not casellaNonOccupabileSinistraSopra(X1, Y1, X2, Y2), X1 = X + K, Y1 = Y + K, X2 = X - J, Y2 = Y - J, rigacolonna(K), rigacolonna(J).
pedineGirabiliDiagonale(X, Y, X1, X2, Y1, Y2) :- casellaOccupata(X, Y, 2), casellaOccupata(X2, Y2, 1), posizioneScelta(X1, Y1), cell(X1, Y1, 2), not casellaNonOccupabileDestraSopra(X1, Y1, X2, Y2), X1 = X + K, Y1 = Y - K, X2 = X - J, Y2 = Y + J, rigacolonna(K), rigacolonna(J).
pedineGirabiliDiagonale(X, Y, X1, X2, Y1, Y2) :- casellaOccupata(X, Y, 2), casellaOccupata(X2, Y2, 1), posizioneScelta(X1, Y1), cell(X1, Y1, 2), not casellaNonOccupabileSinistraSotto(X1, Y1, X2, Y2), X1 = X - K, Y1 = Y + K, X2 = X + J, Y2 = Y - J, rigacolonna(K), rigacolonna(J).
pedineGirabiliDiagonale(X, Y, X1, X2, Y1, Y2) :- casellaOccupata(X, Y, 2), casellaOccupata(X2, Y2, 1), posizioneScelta(X1, Y1), cell(X1, Y1, 2), not casellaNonOccupabileDestraSotto(X1, Y1, X2, Y2), X1 = X - K, Y1 = Y - K, X2 = X + J, Y2 = Y + J, rigacolonna(K), rigacolonna(J).

%ora ci salviamo tutte le pedine che sarebbero mangiate

pedineMangiate(X, YR) :- posizioneScelta(X, Y), pedineGirabiliRiga(X, YR, Y, Y2), casellaOccupata(X, Y2, 1).
pedineMangiate(XR, Y) :- posizioneScelta(X, Y), pedineGirabiliColonna(XR, Y, X, X2), casellaOccupata(X2, Y, 1).
pedineMangiate(XR, YR) :- posizioneScelta(X, Y), pedineGirabiliDiagonale(XR, YR, X, X2, Y, Y2), casellaOccupata(X2, Y2, 1).


%Ora vediamo se ci sono caselle vuote intorno una pedina che dovrebbe essere mangiata, questo ci serve per capire quante pedine di 
%frontiera verranno create

%SinistraSopra
casellaVuota(X, Y) :- pedineMangiate(X, Y), cell(X2, Y2, V), not posizioneScelta(X2, Y2), X = X2 + 1, Y = Y2 + 1, V!=1, V!=2.

%Sopra
casellaVuota(X, Y) :- pedineMangiate(X, Y), cell(X2, Y, V), not posizioneScelta(X2, Y), X = X2 + 1, V!=1, V!=2.

%DestraSopra
casellaVuota(X, Y) :- pedineMangiate(X, Y), cell(X2, Y2, V), not posizioneScelta(X2, Y2), X = X2 + 1, Y2 = Y + 1, V!=1, V!=2.

%Sinistra
casellaVuota(X, Y) :- pedineMangiate(X, Y), cell(X, Y2, V), not posizioneScelta(X, Y2), Y = Y2 + 1, V!=1, V!=2.

%Destra
casellaVuota(X, Y) :- pedineMangiate(X, Y), cell(X, Y2, V), not posizioneScelta(X, Y2), Y2 = Y + 1, V!=1, V!=2.

%SinistraSotto
casellaVuota(X, Y) :- pedineMangiate(X, Y), cell(X2, Y2, V), not posizioneScelta(X2, Y2), X2 = X + 1, Y = Y2 + 1, V!=1, V!=2.

%Sotto
casellaVuota(X, Y) :- pedineMangiate(X, Y), cell(X2, Y, V), not posizioneScelta(X2, Y), X2 = X + 1, V!=1, V!=2.

%DestraSotto
casellaVuota(X, Y) :- pedineMangiate(X, Y), cell(X2, Y2, V), not posizioneScelta(X2, Y2), X2 = X + 1, Y2 = Y + 1, V!=1, V!=2.

%Controlla se la pedina mangiata è una pedina di frontiera
%Si chiama mossaValidaFutura perché creando una pedina di frontiera, si danno mosse all'avversario
mossaValidaFutura(X, Y) :- pedineMangiate(X, Y), casellaVuota(X, Y).

%Se è una pedina di frontiera, penalizza

:~ mossaValidaFutura(X, Y). [1 : 5]

%fine pedine di frontiera e muri